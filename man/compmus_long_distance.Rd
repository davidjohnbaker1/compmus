% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/norms.R
\name{compmus_long_distance}
\alias{compmus_long_distance}
\alias{compmus_self_similarity}
\title{Pairwise distances in long format}
\usage{
compmus_long_distance(xdat, ydat, feature, method = "euclidean")

compmus_self_similarity(dat, feature, method = "euclidean")
}
\arguments{
\item{xdat, ydat, dat}{Data frames with \code{start} and \code{duration}
columns.}

\item{feature}{An (unquoted) column name over which to compute distances.}

\item{method}{A character string indicating which distance metric to use (see
Details). Default is Euclidean distance.}
}
\value{
A tibble with columns \code{xstart}, \code{xduration}, \code{ystart},
  \code{yduration}, and \code{d}.
}
\description{
We use a number of distance measures in Computational Musicology.
\code{compmus_long_distance} brings them together into one place, along with
common alternative names. In order to support plotting, the distances are
returned in long format rather than matrix format. It is designed for
convenience, not speed.
}
\details{
The following methods are supported. \describe{
\item{\code{manhattan},\code{citybolock},\code{taxicab},\code{L1},\code{totvar}}{Manhattan
distance.} \item{\code{euclidean},\code{L2}}{Euclidean distance.}
\item{\code{chebyshev},\code{maximum}}{Chebyshev distance.}
\item{\code{pearson},\code{correlation}}{Pearson's pseudo-distance.}
\item{\code{cosine}}{Cosine pseudo-distance.} \item{\code{angular}}{Angular
distance.} \item{\code{aitchison}}{Aitchison distance.} }
}
\section{Functions}{
\itemize{
\item \code{compmus_self_similarity}: Self-similarity matrices in long format
}}

\examples{
library(tidyverse)
tallis <-
    get_tidy_audio_analysis('2J3Mmybwue0jyQ0UVMYurH') \%>\%
    select(segments) \%>\% unnest(segments) \%>\%
    mutate(pitches = map(pitches, compmus_normalise, 'manhattan'))
chapelle <-
    get_tidy_audio_analysis('4ccw2IcnFt1Jv9LqQCOYDi') \%>\%
    select(segments) \%>\% unnest(segments) \%>\%
    mutate(pitches = map(pitches, compmus_normalise, 'manhattan'))

compmus_long_distance(tallis, chapelle, pitches, method = 'euclidean')

compmus_self_similarity(tallis, pitches, method = 'aitchison')
}
